[IWLS.API.TimeSeries]
# Liste des séries temporelles à récupérer selon leur priorité d'utilisation. {"wlo", "wlp"}
priority = ["wlo", "wlp"]
# Intervalle de temps maximal sans données avant de déclencher l'intepolation et le remplissage des données.
# Laisser vide "" pour désactiver. {format str "<number> <min|h>"}
max_time_gap = "1 min"
# Seuil en dessous duquel les données manquantes sont interpolées et au-dessus desquelles elles sont remplies par
# la time serie suivante. Laisser vide "" pour désactiver, seulement le remplissge sera alors effectué.
# {format str "<number> <min|h>"}
threshold_interpolation-filling = "6 h"
# Liste des valeurs de qualité à filtrer pour wlo.
# Flag de l'API privée {"GOOD", "NOT_EVAL", "QUESTIONABLE", "BAD", "MISSING"}.
# Flag de l'API publique {"1", "2", "3"}. 1 = Good, 2 = Not evaluated, 3 = Questionable
wlo_qc_flag_filter = ["NOT_EVAL", "QUESTIONABLE", "BAD", "MISSING", "2", "3"]
# Temps tampon pour les données de la série temporelle à récupérer pour les interpolations.
# {format str "<number> <min|h>"}
buffer_time = "24 h"

[IWLS.API.Profile]
# {"dev", "prod", "public"}
active = "public"

[IWLS.API.Environment.dev]
name = "DEV"
endpoint = "EndpointPrivateDev"
# Nombre maximal d'appels par période de temps {int}.
calls = 15
# Période de temps en secondes {int}.
period = 1

[IWLS.API.Environment.prod]
name = "PROD"
endpoint = "EndpointPrivateProd"
calls = 10
period = 1

[IWLS.API.Environment.public]
name = "PUBLIC"
endpoint = "EndpointPublic"
calls = 15
period = 1

[IWLS.API.Cache]
# Durée de vie maximale des données en secondes {int}.
ttl = 604800
# Répertoire de stockage des données dans le cache {str}. Il est possible de spécifier un chemin absolu ou relatif.
# Exemple de chemin relatif : "./cache" pour un répertoire "cache" à la racine du projet.
cache_path = "./cache"

[DATA.Transformation.filter]
# Valeurs minimales et maximales de latitude et longitude pour filtrer les données {int, float}.
# Commenter les lignes suivantes pour utiliser les valeurs par défaut.
min_latitude = -90
max_latitude = 90
min_longitude = -180
max_longitude = 180
# Valeurs minimales et maximales de profondeur pour filtrer les données {int, float}
min_depth = 0
# Ce paramètre est désactivé par défaut.
# max_depth = 1000

[DATA.Georeference.water_level]
# Écart maximal en minutes entre les données et les niveaux d'eau à récupérer pour le géoréférencement
# {format str "<number> <min|h>"}.
water_level_tolerance = "15 min"

[CSB.Processing.vessel]
# Nom du gestionnaire de configuration des navires {"VesselConfigJsonManager"}
manager_type = "VesselConfigJsonManager"
# Chemin du fichier de configuration des navires {str}. Il est possible de spécifier un chemin absolu ou relatif.
# Exemple de chemin relatif : "./TCSB_VESSELSLIST.json" pour un fichier "TCSB_VESSELSLIST.json" à la racine du projet.
json_config_path = "./CONFIG_vessels.json"

[CSB.Processing.options]
# Niveau de log {"DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"}
log_level = "INFO"
# Valeur minimale de 1 {int}
max_iterations = 10
# Liste des formats d'export des données traitées {"geojson", "gpkg", "csar", "parquet", "feather", "csv"}
export_format = ["gpkg", "csar"]
# Nombre de décimales significatives pour les données traitées {int}.
decimal_precision = 2

[CARIS.Environment]
# Chemin d'accès à l'installation des logiciels CARIS {str}.
base_path = "C:/Program Files/CARIS"
# Logiciel de traitement de données CARIS {"BASE Editor", "HIPS and SIPS"}
software = "BASE Editor"
# Version de CARIS {str}.
version = "5.5"
# Version de l'API de Python utilisée par CARIS {str}.
# Doit être la même version que l'interpreteur Python utilisé.
python_version = "3.11"
